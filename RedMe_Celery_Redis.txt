2/8   D10.2. Знакомство с Celery
https://apps.skillfactory.ru/learning/course/course-v1:SkillFactory+PDEV-D+2022/block-v1:SkillFactory+PDEV-D+2022+type@sequential+block@2469d92521574bb68294c8b78a52353e/block-v1:SkillFactory+PDEV-D+2022+type@vertical+block@fb8bc39fb8e74b2280301365bc27b370

Библиотека Celery
(virtualenv) $ pip3 install celery
Далее, согласно документации библиотеки, необходимо перейти в директорию проекта 
и добавить файл celery.py рядом с settings.py.

import os
from celery import Celery
 
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mcdonalds.settings')
 
app = Celery('mcdonalds')
app.config_from_object('django.conf:settings', namespace = 'CELERY')

app.autodiscover_tasks()

В первую очередь мы импортируем библиотеку для взаимодействия с операционной системой и саму библиотеку Celery.
Второй строчкой мы связываем настройки Django с настройками Celery через переменную окружения.
Далее мы создаём экземпляр приложения Celery и устанавливаем для него файл конфигурации. Мы также указываем пространство имён, чтобы Celery сам находил все необходимые настройки в общем конфигурационном файле settings.py. Он их будет искать по шаблону «CELERY_***».
Последней строчкой мы указываем Celery автоматически искать задания в файлах tasks.py каждого приложения проекта.
Также, согласно рекомендациям из документации к Celery, мы должны добавить следующие строки в файл __init__.py (рядом с settings.py):

from .celery import app as celery_app

__all__ = ('celery_app',)

***********************************
Установить Redis и настроить его для работы с Celery.

Redis   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Создаем Database на сайте Redis.io
Вход по Google регистрации

https://app.redislabs.com/
Новая база "McDonalds"
Default user password: 3J6YKt9fQIaye8krHHY1kmUDwFBKAUCy
Public endpoint: redis-10049.c100.us-east-1-4.ec2.cloud.redislabs.com:10049

Грузим редис в виртуалку
pip3 install redis

Добавляем а apps.py
import redis
red=redis.Redis(
    host= 'redis-10049.c100.us-east-1-4.ec2.cloud.redislabs.com',
    port=10049,
    password='3J6YKt9fQIaye8krHHY1kmUDwFBKAUCy'
)
Проверяем подключени. В терминале :
(venv) PS C:\DjangoSQL\Projects\Mc_Donalds> python -i apps.py

>>> red
видим- Redis<ConnectionPool<Connection<host=redis-10049.c100.us-east-1-4.ec2.cloud.redislabs.com,port=10049,db=0>>>
-подключились. Создадим объект red
>>> red.set('var1','some value')
-True - сохранили, получим
>>> red.get('var1') 
b'some value'

 добавить некоторые настройки в конфигурацию проекта (settings.py), дописав следующие строки:

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

 И, наконец, попробуем запустить локальный сервер Django и Celery. 
 
 Сначала надо запустить Redis сервер от имени администратора:
 D:\Programming\SkillFactory. Номер группы- PDEV-31\Distrib\Redis\redis-server.exe
 (Ярлык на рабочем столе)

 Для этого вы должны иметь два окна терминала. В одном из них, как и обычно, 
 вы должны запустить Django: 
python3 manage.py runserver

А в другом — запустить Celery: 
(venv) PS C:\DjangoSQL\Projects> celery -A Projects worker -l INFO --pool=solo

Разберёмся, что мы вообще делаем этой командой. Мы говорим Celery запустить воркер (worker) для приложения
(флаг -A означает application) с именем mcdonalds. Последний флаг -l и его значение INFO указывает, что именно выводить в лог консоли.
-----------------------------------------------------------
class IndexView(View):
    def get(self, request):
        # printer.delay(10)
        # printer.apply_async([10], countdown=5)
        printer.apply_async([10], eta=datetime.now() + timedelta(seconds=5))
        hello.delay()
        return HttpResponse('Hello from view.py file!')

Параметр countdown устанавливает время (в секундах), через которое задача должна начать выполняться.
Укажем, что задача счётчика должна начаться через 5 секунд после того, как она была создана.
Если countdown принимает целое число (количество секунд), то параметру eta требуется уже объект типа datetime.
И есть ещё один, последний, параметр выполнения — expires.
Он служит для того, чтобы убирать задачу из очереди по прошествии какого-то времени.
который принимает datetime-объект или число. Первый вариант указывает на точное время, когда задача должна быть
убрана из очереди, а второй — число, количество секунд, через которое задачу нужно убрать.
-----------------------------------------------------------

